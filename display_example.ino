#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define LOGO_WIDTH    80
#define LOGO_HEIGHT   42

static const unsigned char PROGMEM logo_bitmap[] = { 
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111100, B00000000, B00000000, 
    B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11111111, B11000000, 
    B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B00000000, B00000001, B11111100, 
    B00000000, B00000000, B00000000, B00000000, B00011111, B11111111, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00000000, B00000001, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00000000, B00000111, B11111110, B00011110, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00000000, B00011111, B11111000, B00000111, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00000000, B11111111, B11000000, B00000011, B10000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00000011, B11111111, B11110000, B00000001, B10000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00001111, B11111111, B11111110, B00000000, B11000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00111111, B11111111, B11111111, B10000000, B01100000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B01111111, B11111111, B11111111, B11000000, B00100000, B00000000, B00000000, B00000000, 
    B00000000, B00000001, B11111111, B11111111, B11111111, B11100000, B00110000, B00000000, B00000000, B00000000, 
    B00000000, B00000011, B11111111, B11111111, B11111111, B11110000, B00110000, B00000000, B00000000, B00000000, 
    B00000000, B00001111, B11111111, B11111111, B00000011, B11110000, B00010000, B00000000, B00000000, B00000000, 
    B00000000, B00011111, B11111111, B11111110, B00000001, B11111000, B00010000, B00000000, B00000000, B00000000, 
    B00000000, B00111111, B11101111, B11111111, B11110000, B11111000, B00011000, B00000000, B00000000, B00000000, 
    B00000000, B11111111, B11001111, B11111111, B11111100, B01111100, B00011000, B00000000, B00000000, B00000000, 
    B00000001, B11111111, B10001111, B11100000, B01111110, B01111100, B00011000, B00000000, B00000000, B00000000, 
    B00000011, B11111111, B00001111, B11000000, B00011110, B00111110, B00011000, B00000000, B00000000, B00000000, 
    B00000111, B11111111, B00011111, B11000011, B11111110, B00111110, B00011000, B00000000, B00000000, B00000000, 
    B00001111, B11111111, B00011111, B10001111, B11111110, B01111110, B00011000, B00000000, B00000000, B00000000, 
    B00001111, B11111111, B00011111, B10001111, B11111100, B01111110, B00010000, B00000000, B00000000, B00000000, 
    B00011111, B11111111, B00001111, B10001110, B00000000, B01111110, B00010000, B00000000, B00000000, B00000000, 
    B00111111, B11111111, B00001111, B10001111, B00000000, B11111110, B00110000, B00000000, B00000000, B00000000, 
    B01111111, B11111111, B00001111, B10001111, B11000011, B11111110, B00110000, B00000000, B00100000, B00000000, 
    B01111111, B11011111, B10001111, B10001111, B11111111, B11111100, B01100000, B00000000, B01000000, B00000000, 
    B11111111, B10011111, B10000111, B11000011, B11111111, B11111100, B01100000, B00000000, B10000000, B00000000, 
    B11111111, B00011111, B11000111, B11100000, B00001111, B11111100, B11000000, B00000001, B00000000, B00000000, 
    B11111110, B00001111, B11000011, B11110000, B00011111, B11111000, B11000000, B00000110, B00000000, B00000000, 
    B01111100, B00000111, B11100001, B11111111, B11111111, B11111001, B10000000, B00001000, B00000000, B00000000, 
    B00011000, B00000111, B11110000, B11111111, B11111111, B11110011, B00000000, B00110000, B00000000, B00000000, 
    B00000000, B00000011, B11111000, B11111111, B11111111, B11100110, B00000000, B01000000, B00000000, B00000000, 
    B00000000, B00000001, B11111100, B00111111, B11111111, B11001100, B00000001, B10000000, B00000000, B00000000, 
    B00000000, B00000000, B11111111, B00001111, B11111111, B00111000, B00000110, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B01111111, B11000011, B11111100, B01110000, B00011100, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00011111, B11110000, B00000011, B11000000, B00110000, B00000000, B00000000, B00000000, 
    B00000000, B00000011, B00000111, B11111111, B11111111, B00000001, B11000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B11000000, B11111111, B11111100, B00001110, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00111000, B00001111, B10000000, B01111000, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00001111, B11000000, B00001111, B11000000, B00000000, B00000000, B00000000, B00000000, 
    B00000000, B00000000, B00000000, B00001111, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000
};

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT);

void setup() {
    Serial.begin(115200);
    Wire.begin(5, 4);
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
}

void loop() {
    long long timeAtStart = micros();
    exampleBitmap();
    long long deltaTime = micros() - timeAtStart;
    Serial.println(1000000L / deltaTime);
}

void exampleShapes() {
    display.clearDisplay();
    
    //               X1  Y1  W   H
    display.drawRect( 0, 10, 20, 20, WHITE);
    display.fillRect(30, 10, 20, 20, WHITE);
    //                 X   Y   R
    display.drawCircle(10, 53, 10, WHITE);
    display.fillCircle(40, 53, 10, WHITE);
    //                     X1  Y1  W   H   R
    display.drawRoundRect( 77, 10, 20, 20, 8, WHITE);
    display.fillRoundRect(107, 10, 20, 20, 8, WHITE);
    //                    X1  Y1   X2  Y2   X3  Y3
    display.drawTriangle( 87, 43,  77, 63,  97, 63, WHITE);
    display.fillTriangle(117, 43, 107, 63, 127, 63, WHITE);
    
    display.display();
}
  
void exampleBitmap() {
    static int x = 0;
    static int y = 0;
    static int vx = 1;
    static int vy = 1;
    display.clearDisplay();
    static bool inverted = false;
    x += vx;
    y += vy;
    bool revertVx = x < 0 || x + LOGO_WIDTH >= SCREEN_WIDTH;
    bool revertVy = y < 0 || y + LOGO_HEIGHT >= SCREEN_HEIGHT;
    if (revertVx) {
        vx = -vx;
    }
    if (revertVy) {
        vy = -vy;
    }
    if (revertVx && revertVy) {
        inverted = !inverted;
        display.invertDisplay(inverted);
    }
    display.drawBitmap(x, y, logo_bitmap, LOGO_WIDTH, LOGO_HEIGHT, WHITE);
    display.display();
}
